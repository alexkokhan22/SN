{"version":3,"sources":["component/common/Preloader/preloader.module.css","component/Profile/ProfileInfo/ProfileInfo.module.css","component/Nav/Nav.module.css","redux/dialogsReducer.tsx","api/api.ts","redux/profileReducer.tsx","redux/usersReducer.ts","redux/authReducer.tsx","redux/appReducer.tsx","redux/reduxStore.ts","component/Nav/Nav.tsx","component/Music/music.tsx","component/News/News.tsx","component/Settings/Settings.tsx","component/Dialogs/DialogsItem/DialogsItem.tsx","component/Dialogs/Messages/Messages.tsx","component/common/FormsControls/FormConrols.tsx","utils/validators/validators.ts","component/Dialogs/messageForm/MessageForm.tsx","component/Dialogs/Dialogs.tsx","HOC/WithAuthRedirectComponent.tsx","component/Dialogs/DialogsContainer.tsx","component/common/Paginator/Paginators.tsx","assets/images/kisspng-avatar-user-computer-icons-software-developer-5b327cc9cc15f7.872727801530035401836.png","component/Users/User.tsx","component/Users/Users.tsx","assets/images/loading-97.gif","component/common/Preloader/Preloader.tsx","redux/selectors/usersSelector.ts","component/Users/UsersContainer.tsx","component/Profile/ProfileInfo/ProfileStatus.tsx","assets/images/5.jpg","component/Profile/ProfileInfo/ProfileData.tsx","component/Profile/ProfileInfo/ProfileDataReduxForm.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx","component/Profile/Posts/Post/Post.tsx","component/Profile/Posts/postForm/PostForm.tsx","component/Profile/Posts/MyPosts.tsx","component/Profile/Posts/MyPostsContainer.tsx","component/Profile/Profile.tsx","component/Profile/ProfileContainer.tsx","assets/images/logo.jpg","component/Header/Header.tsx","component/Header/HeaderContainer.tsx","component/login/login.tsx","App.tsx","reportWebVitals.ts","index.tsx","component/login/login.module.css","component/Dialogs/Dialogs.module.css","component/Profile/Posts/MyPosts.module.css","component/common/Paginator/paginator.module.css","component/Users/Users.module.css","component/Header/Header.module.css","component/Profile/Posts/Post/Post.module.css","component/common/FormsControls/FormControle.module.css"],"names":["module","exports","initialState","dialogs","id","name","messages","message","dialogsReducer","state","action","type","addMessage","instance","axios","create","withCredentials","baseURL","headers","usersApi","getUsers","currentPage","pageSize","a","get","response","data","unFollowUsers","delete","followUsers","post","profileApi","setUsersProfile","userId","getStatus","updateStatus","status","put","savePhoto","file","formData","FormData","append","saveProfile","profile","headerApi","setUsersLogin","loginApi","postUsersLogin","email","password","rememberMe","captcha","deleteUsersLogin","securityApi","posts","likeCount","aboutMe","contacts","skype","vk","facebook","icq","googlePlus","twitter","instagram","whatsApp","lookingForAJob","lookingForAJobDescription","fullName","photos","small","large","setStatusActionCreator","setUsersProfileThunk","dispatch","profileReducer","addPost","filter","p","postId","users","totalUsersCount","isFetching","followingInProgress","usersFollowUnFollowReducer","items","itemId","followed","map","u","follow","unFollow","toggleIsFetching","toggleFollowingInProgress","usersId","followUnFollowUsers","apiMethod","resultCode","login","isAuth","setUsersData","getCaptcha","captchaUrl","setUsersDataThunk","removeLoginDataThunk","getCaptchaTC","url","initialized","appReducer","reducers","combineReducers","totalCount","auth","app","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","Nav","className","classes","nav","item","to","activeClassName","active","Music","News","Settings","DialogsItem","props","Messages","FormControl","meta","touched","error","children","hasError","s","formControl","Textarea","input","restProps","Input","requiredField","value","maxLengthCreator","maxLength","length","MessageReduxForm","reduxForm","onSubmit","handleSubmit","textarea","Field","component","validate","buttonAdd","Dialogs","dialogsItem","d","messageItem","m","values","onChangeText","mapStateToPropsForRedirect","withAuthRedirectComponent","Component","RedirectComponent","this","React","connect","compose","newTextMessage","onClickMessageActionCreator","Paginator","pagesCount","Math","ceil","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginatorContainer","paginatorPrev","onClick","numberPage","selectedPage","onPageChanged","paginatorNext","User","userContainer","img","src","userPhoto","buttonFollow","disabled","some","Users","Preloader","style","PreloaderImg","getPageSize","createSelector","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getIsAuth","UsersApiComponent","pageNumber","changeCurrentPage","getUser","bind","ProfileStatus","editMode","onDoubleClick","setState","onBlur","prevProps","prevState","snapshot","statusContainer","statusInput","autoFocus","onChange","event","currentTarget","ContactsProfile","contactTitle","contactValue","ProfileData","profileDataContainer","contactsContainer","Object","keys","key","isOwner","buttonEdit","goToEditMode","ProfileDataReduxForm","editDataContainer","placeholder","editContactsContainer","buttonSave","ProfileInfo","setEditMode","setSubmit","profileInfo","avatar","avatarContainer","myPhoto","spanPhoto","inputFile","e","target","files","initialValues","Post","messagesContainer","likes","PostsReduxForm","inputForm","buttonPost","MyPosts","memo","postElement","postsContainer","addPostContainer","postContainer","MyPostsContainer","addPostActionCreator","Profile","ProfileContainer","match","params","myId","history","refresh","getState","withRouter","Header","header","logo","logOut","buttonLogOut","loginNav","HeaderContainer","LoginReduxForm","loginStyles","checkboxContainer","checkbox","checkboxSpan","loginButton","setLogin","stopSubmit","_error","removeLogin","loginContainer","h1","App","initializedUser","path","render","DialogsContainer","UsersContainer","promise","Promise","all","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2687044.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"preloader_img__3Zh3_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__1E-y1\",\"avatarContainer\":\"ProfileInfo_avatarContainer__226B_\",\"avatar\":\"ProfileInfo_avatar__13oZL\",\"spanPhoto\":\"ProfileInfo_spanPhoto__UDrC8\",\"inputFile\":\"ProfileInfo_inputFile__1whaB\",\"img\":\"ProfileInfo_img__2fJIx\",\"myPhoto\":\"ProfileInfo_myPhoto__1eIJa\",\"statusContainer\":\"ProfileInfo_statusContainer__1hqEy\",\"statusInput\":\"ProfileInfo_statusInput__ElgwB\",\"profileDataContainer\":\"ProfileInfo_profileDataContainer__296Co\",\"contactsContainer\":\"ProfileInfo_contactsContainer__1ta74\",\"buttonEdit\":\"ProfileInfo_buttonEdit__idZZE\",\"editDataContainer\":\"ProfileInfo_editDataContainer__3ye5a\",\"buttonSave\":\"ProfileInfo_buttonSave__2POIe\",\"editContactsContainer\":\"ProfileInfo_editContactsContainer__M0jCe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__2l9hx\",\"item\":\"Nav_item__2LBG3\",\"active\":\"Nav_active__1Ez4Q\"};","export type messagePropsType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type dialogPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type dialogsPropsType = {\r\n    dialogs: Array<dialogPropsType>\r\n    messages: Array<messagePropsType>\r\n}\r\n\r\nexport type AddNewMessageType = {\r\n    type: 'dialogs/Add-New-Message',\r\n    addMessage: string\r\n    newTextMessage: string\r\n}\r\n\r\nexport type actionDialogsType = AddNewMessageType\r\n\r\nlet initialState: dialogsPropsType = {\r\n    dialogs: [\r\n        {id: 1, name: 'Alex'},\r\n        {id: 2, name: 'Roma'},\r\n        {id: 3, name: 'Lera'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you ?'}\r\n    ]\r\n}\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: actionDialogsType): dialogsPropsType => {\r\n    switch (action.type) {\r\n        case 'dialogs/Add-New-Message':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 4, message: action.addMessage}],\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const onClickMessageActionCreator = (addMessage: string): AddNewMessageType => {\r\n    return {type: 'dialogs/Add-New-Message', addMessage, newTextMessage: ''}\r\n}\r\n\r\n\r\nexport default dialogsReducer;","import axios from \"axios\";\r\nimport {profileUsersPropsType} from \"../redux/profileReducer\";\r\n\r\nconst API_KEY = '96882b02-a427-4592-b196-6833093c647f';\r\n\r\nconst instance = axios.create(\r\n    {\r\n        withCredentials: true,\r\n        baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n        headers: {\r\n            'API-KEY': API_KEY\r\n        }\r\n    }\r\n)\r\n\r\nexport const usersApi = {\r\n    getUsers: async (currentPage: number, pageSize: number) => {\r\n        const response = await instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n        return response.data\r\n\r\n    },\r\n    unFollowUsers: async (id: number) => {\r\n        const response = await instance.delete(`follow/${id}`)\r\n        return response.data\r\n    },\r\n\r\n    followUsers: async (id: number) => {\r\n        const response = await instance.post(`follow/${id}`)\r\n        return response.data\r\n    }\r\n\r\n}\r\n\r\nexport const profileApi = {\r\n    setUsersProfile: async (userId: number) => {\r\n        const response = await instance.get(`profile/` + userId)\r\n        return response.data\r\n\r\n    },\r\n    getStatus: async (userId: string) => {\r\n        const response = await instance.get(`profile/status/` + userId)\r\n        return response.data\r\n    },\r\n    updateStatus: async (status: string) => {\r\n        const response = await instance.put(`profile/status/`, {status: status})\r\n        return response.data\r\n    },\r\n    savePhoto: async (file: File) => {\r\n        let formData = new FormData()\r\n        formData.append('image', file)\r\n        const response = await instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n        return response\r\n    },\r\n    saveProfile: async (profile: profileUsersPropsType) => {\r\n        const response = await instance.put(`profile`, profile)\r\n        return response\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const headerApi = {\r\n    setUsersLogin: async () => {\r\n        const response = await instance.get('auth/me')\r\n        return response.data\r\n\r\n    }\r\n}\r\n\r\nexport const loginApi = {\r\n    postUsersLogin: async (email: string, password: string, rememberMe: boolean, captcha: string) => {\r\n        const response = await instance.post(`auth/login`, {email, password, rememberMe, captcha})\r\n        return response.data\r\n\r\n    },\r\n    deleteUsersLogin: async () => {\r\n        const response = await instance.delete(`auth/login`)\r\n        return response.data\r\n    }\r\n}\r\n\r\nexport const securityApi = {\r\n    captcha: async () => {\r\n        const response = await instance.get(`security/get-captcha-url`)\r\n        return response\r\n    }\r\n}","import {Dispatch} from 'redux';\r\nimport {profileApi} from '../api/api';\r\nimport {AppStatePropsType} from \"./reduxStore\";\r\n\r\n\r\nexport type usersProfilePhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type contactsUsersPropsType = {\r\n    [key: string]: string\r\n}\r\nexport type profileUsersPropsType = {\r\n    aboutMe: string | null\r\n    contacts: contactsUsersPropsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string | null\r\n    userId: number | null\r\n    photos: usersProfilePhotosType\r\n\r\n}\r\nexport type postsPropsType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n}\r\nexport type profilePropsType = {\r\n    posts: Array<postsPropsType>\r\n    profile: profileUsersPropsType\r\n    status: string\r\n}\r\nexport type AddPostDispatchType = {\r\n    type: 'profile/ADD-POST',\r\n    addPost: string\r\n}\r\nexport type SetUsersProfile = {\r\n    type: 'profile/SET-USERS-PROFILE'\r\n    profile: profileUsersPropsType\r\n}\r\nexport type SetUsersStatus = {\r\n    type: 'profile/SET-USERS-STATUS'\r\n    status: string\r\n}\r\nexport type DeletePostsType = ReturnType<typeof deletePostsAC>\r\nexport type savePhotosUsersType = ReturnType<typeof saveUsersPhotoProfile>\r\nexport type actionProfileType =\r\n    AddPostDispatchType\r\n    | SetUsersProfile\r\n    | SetUsersStatus\r\n    | DeletePostsType\r\n    | savePhotosUsersType\r\n\r\nlet initialState: profilePropsType = {\r\n    posts: [\r\n        {id: 1, message: ' My first post', likeCount: 11},\r\n        {id: 2, message: 'Hi, how are you', likeCount: 21},\r\n    ],\r\n    profile: {\r\n        aboutMe: '',\r\n        contacts: {\r\n            skype: '',\r\n            vk: '',\r\n            facebook: '',\r\n            icq: '',\r\n            email: '',\r\n            googlePlus: '',\r\n            twitter: '',\r\n            instagram: '',\r\n            whatsApp: ''\r\n        },\r\n        lookingForAJob: true,\r\n        lookingForAJobDescription: '',\r\n        fullName: '',\r\n        userId: 1,\r\n        photos: {\r\n            small: '',\r\n            large: ''\r\n        }\r\n    },\r\n    status: ''\r\n}\r\n\r\n\r\nconst profileReducer = (state = initialState, action: actionProfileType) => {\r\n    switch (action.type) {\r\n        case 'profile/ADD-POST': {\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: 3, message: action.addPost, likeCount: 0}],\r\n            }\r\n        }\r\n\r\n        case 'profile/SET-USERS-PROFILE': {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n\r\n        case 'profile/SET-USERS-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n\r\n        case 'profile/DELETE-POSTS': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter((p) => p.id !== action.postId)\r\n            }\r\n        }\r\n\r\n        case \"profile/SAVE-USERS-PHOTO-PROFILE\": {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = (addPost: string): AddPostDispatchType => {\r\n    return {type: 'profile/ADD-POST', addPost}\r\n\r\n}\r\n\r\n\r\nexport const setStatusActionCreator = (status: string): SetUsersStatus => {\r\n    return {\r\n        type: 'profile/SET-USERS-STATUS', status\r\n    }\r\n}\r\n\r\nexport const deletePostsAC = (postId: number) => {\r\n    return {\r\n        type: 'profile/DELETE-POSTS', postId\r\n    } as const\r\n}\r\n\r\nexport const setUsersProfile = (profile: profileUsersPropsType): SetUsersProfile => {\r\n    return {type: 'profile/SET-USERS-PROFILE', profile}\r\n}\r\n\r\nexport const saveUsersPhotoProfile = (photos: usersProfilePhotosType) => {\r\n    return {type: 'profile/SAVE-USERS-PHOTO-PROFILE', photos} as const\r\n}\r\n\r\nexport const setUsersProfileThunk = (userId: number) => async (dispatch: Dispatch) => {\r\n    const response = await profileApi.setUsersProfile(userId)\r\n    dispatch(setUsersProfile(response))\r\n}\r\n\r\nexport const getUsersStatusThunk = (userId: string) => async (dispatch: Dispatch) => {\r\n    const response = await profileApi.getStatus(userId)\r\n    dispatch(setStatusActionCreator(response))\r\n}\r\n\r\nexport const updateUsersStatusThunk = (status: string) => async (dispatch: Dispatch) => {\r\n    const response = await profileApi.updateStatus(status)\r\n    if (response.resultCode === 0) {\r\n        dispatch(setStatusActionCreator(status))\r\n    }\r\n}\r\n\r\nexport const savePhotoThunk = (file: File) => async (dispatch: Dispatch) => {\r\n    const response = await profileApi.savePhoto(file)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(saveUsersPhotoProfile(response.data.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfileThunk = (profile: profileUsersPropsType) => async (dispatch: Dispatch<any>, getState: () => AppStatePropsType) => {\r\n    const userId = getState().auth.id\r\n    const response = await profileApi.saveProfile(profile)\r\n    if (response.data.resultCode === 0) {\r\n        if (userId) {\r\n            dispatch(setUsersProfileThunk(userId))\r\n        }\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import {Dispatch} from 'redux';\r\nimport {usersApi} from '../api/api';\r\n\r\ntype usersPhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type userPropsType = {\r\n    id: number\r\n    photos: usersPhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n}\r\n\r\nexport type UsersPropsType = {\r\n    users: Array<userPropsType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport type followACPropsType = {\r\n    type: 'users/FOLLOW'\r\n    userId: number\r\n}\r\n\r\nexport type unfollowACPropsType = {\r\n    type: 'users/UNFOLLOW'\r\n    userId: number\r\n}\r\n\r\nexport type setUsersACPropsType = {\r\n    type: 'users/SET_USERS'\r\n    users: Array<userPropsType>\r\n}\r\n\r\nexport type changeCurrentPageType = {\r\n    type: 'users/CHANGE_CURRENT_PAGE'\r\n    currentPage: number\r\n}\r\n\r\nexport type setTotalUsersCountType = {\r\n    type: 'users/SET_TOTAL_USERS_COUNT'\r\n    totalCount: number\r\n}\r\n\r\nexport type isFetchingACType = {\r\n    type: 'users/IS_FETCHING'\r\n    isFetching: boolean\r\n}\r\n\r\nexport type  followingInProgressType = {\r\n    type: 'users/TOGGLE_FOLLOWING_IN_PROGRESS'\r\n    isFetching: boolean\r\n    usersId: number\r\n}\r\n\r\nexport type actionUsersType = followACPropsType\r\n    | unfollowACPropsType\r\n    | setUsersACPropsType\r\n    | changeCurrentPageType\r\n    | setTotalUsersCountType\r\n    | isFetchingACType\r\n    | followingInProgressType\r\n\r\n\r\nexport let initialState: UsersPropsType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const usersFollowUnFollowReducer = (items: Array<userPropsType>, itemId: number, followed: boolean) => {\r\n    return items.map(u => {\r\n        if (u.id === itemId) {\r\n            return {...u, followed}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: actionUsersType): UsersPropsType => {\r\n    switch (action.type) {\r\n        case 'users/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: usersFollowUnFollowReducer(state.users, action.userId, true)\r\n                // users: [...state.users.map(u => {\r\n                //     if (u.id === action.userId) {\r\n                //         return {...u, followed: true}\r\n                //     }\r\n                //     return u;\r\n                // })]\r\n            }\r\n        case 'users/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: usersFollowUnFollowReducer(state.users, action.userId, false)\r\n                // users: [...state.users.map(u => {\r\n                //     if (u.id === action.userId) {\r\n                //         return {...u, followed: false}\r\n                //     }\r\n                //     return u;\r\n                // })]\r\n            }\r\n        case 'users/SET_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n\r\n        case 'users/CHANGE_CURRENT_PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case \"users/SET_TOTAL_USERS_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        case \"users/IS_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n\r\n        case \"users/TOGGLE_FOLLOWING_IN_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.usersId]\r\n                    : state.followingInProgress.filter(id => id != action.usersId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number): followACPropsType => {\r\n    return {type: 'users/FOLLOW', userId}\r\n}\r\nexport const unFollow = (userId: number): unfollowACPropsType => {\r\n    return {type: 'users/UNFOLLOW', userId}\r\n}\r\n\r\nexport const setUsers = (users: Array<userPropsType>): setUsersACPropsType => {\r\n    return {type: 'users/SET_USERS', users}\r\n}\r\n\r\nexport const changeCurrentPage = (currentPage: number): changeCurrentPageType => {\r\n    return {type: 'users/CHANGE_CURRENT_PAGE', currentPage}\r\n}\r\n\r\nexport const setTotalUsersCount = (totalCount: number): setTotalUsersCountType => {\r\n    return {type: 'users/SET_TOTAL_USERS_COUNT', totalCount}\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean): isFetchingACType => {\r\n    return {type: 'users/IS_FETCHING', isFetching}\r\n}\r\n\r\nexport const toggleFollowingInProgress = (isFetching: boolean, usersId: number): followingInProgressType => {\r\n    return {type: 'users/TOGGLE_FOLLOWING_IN_PROGRESS', isFetching, usersId}\r\n}\r\n\r\nexport const followUnFollowUsers = async (userId: number, dispatch: Dispatch, apiMethod: any, action: any) => {\r\n    dispatch(toggleFollowingInProgress(true, userId))\r\n    const response = await apiMethod(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(action(userId))\r\n    }\r\n    dispatch(toggleFollowingInProgress(false, userId))\r\n}\r\n\r\n\r\nexport const getUserThunkCreator = (currentPage: number, pageSize: number) => async (dispatch: Dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    const response = await usersApi.getUsers(currentPage, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(response.items))\r\n    dispatch(setTotalUsersCount(response.totalCount))\r\n}\r\n\r\nexport const unFollowThunk = (userId: number) => async (dispatch: Dispatch) => {\r\n    await followUnFollowUsers(userId, dispatch, usersApi.unFollowUsers.bind(usersApi), unFollow)\r\n}\r\n\r\nexport const followThunk = (userId: number) => async (dispatch: Dispatch) => {\r\n    await followUnFollowUsers(userId, dispatch, usersApi.followUsers.bind(usersApi), follow)\r\n\r\n}\r\n","import {Dispatch} from 'redux';\r\nimport {headerApi, loginApi, securityApi} from '../api/api';\r\nimport {stopSubmit} from 'redux-form';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {AppStateActionType, AppStatePropsType} from './reduxStore';\r\n\r\ntype setUsersDataType = {\r\n    type: 'auth/SET-USERS-DATA'\r\n    data: {\r\n        id: number | null\r\n        login: string | null\r\n        email: string | null\r\n        isAuth: boolean\r\n        captcha: string | null\r\n    }\r\n}\r\n\r\ntype getCaptchaType = ReturnType<typeof getCaptcha>\r\n\r\nexport type actionAuthUsersType = setUsersDataType | getCaptchaType\r\n\r\nexport type authPropsType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuth: boolean\r\n    captcha: string | null\r\n}\r\n\r\nlet initialState: authPropsType = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n    captcha: null\r\n}\r\n\r\n\r\nexport const authReducer = (state: authPropsType = initialState, action: actionAuthUsersType) => {\r\n    switch (action.type) {\r\n        case 'auth/SET-USERS-DATA':\r\n        case \"auth/GET-CAPTCHA\": {\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUsersData = (id: number | null, login: string | null, email: string | null, isAuth: boolean, captcha: string | null): setUsersDataType => {\r\n    return {type: 'auth/SET-USERS-DATA', data: {id, login, email, isAuth, captcha}}\r\n}\r\n\r\nexport const getCaptcha = (captchaUrl: string) => {\r\n    return {type: 'auth/GET-CAPTCHA', data: {captcha: captchaUrl}}as const\r\n}\r\n\r\nexport const setUsersDataThunk = () => async (dispatch: Dispatch) => {\r\n    const response = await headerApi.setUsersLogin()\r\n    if (response.resultCode === 0) {\r\n        let {id, login, email, captcha} = response.data\r\n        dispatch(setUsersData(id, login, email, true, captcha))\r\n    }\r\n}\r\n\r\nexport const setLoginDataThunk = (email: string, password: string, rememberMe: boolean, captcha: string)\r\n    : ThunkAction<void, AppStatePropsType, unknown, AppStateActionType> =>\r\n    async (dispatch) => {\r\n        const response = await loginApi.postUsersLogin(email, password, rememberMe, captcha)\r\n        if (response.resultCode === 0) {\r\n            await dispatch(setUsersDataThunk())\r\n        }else {\r\n            if (response.resultCode === 10) {\r\n                return dispatch(getCaptchaTC())\r\n            }\r\n            const messages = response.messages.length > 0 ? response.messages[0] : 'email or password is wrong'\r\n            dispatch(stopSubmit('login', {_error: messages}))\r\n        }\r\n    }\r\n\r\nexport const removeLoginDataThunk = () => async (dispatch: Dispatch) => {\r\n    const response = await loginApi.deleteUsersLogin()\r\n    if (response.resultCode === 0) {\r\n        dispatch(setUsersData(null, null, null, false, null))\r\n    }\r\n}\r\n\r\nexport const getCaptchaTC = () => async (dispatch: Dispatch) => {\r\n    const response = await securityApi.captcha()\r\n    const captchaUrl = response.data.url\r\n    dispatch(getCaptcha(captchaUrl))\r\n}","import {ThunkAction} from 'redux-thunk';\r\nimport {setUsersDataThunk} from './authReducer';\r\nimport {AppStateActionType, AppStatePropsType} from './reduxStore';\r\n\r\n\r\nexport type AppReducerPropsType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: AppReducerPropsType = {\r\n    initialized: false\r\n}\r\n\r\nexport type actionAppType = ReturnType<typeof setInitialized>\r\n\r\nconst appReducer = (state: AppReducerPropsType = initialState, action: actionAppType) => {\r\n    switch (action.type) {\r\n        case 'app/SET-INITIALIZED': {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setInitialized = () => {\r\n    return {type: 'app/SET-INITIALIZED'}\r\n}\r\n\r\nexport const initializeAppTC = ():\r\n    ThunkAction<void, AppStatePropsType, unknown, AppStateActionType> =>\r\n    async (dispatch) => {\r\n        const promise = dispatch(setUsersDataThunk())\r\n        await Promise.all([promise])\r\n        dispatch(setInitialized())\r\n        /*let promise = dispatch(setUsersDataThunk())\r\n        Promise.all([promise]).then(() => {\r\n            dispatch(setInitialized())\r\n        })*/\r\n    }\r\n\r\nexport default appReducer;\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport dialogsReducer, {actionDialogsType} from './dialogsReducer';\r\nimport profileReducer, {actionProfileType} from './profileReducer';\r\nimport {actionUsersType, usersReducer} from './usersReducer';\r\nimport {actionAuthUsersType, authReducer} from './authReducer';\r\nimport  thunkMiddleware from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer, { actionAppType } from './appReducer';\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profile: profileReducer,\r\n    dialogs: dialogsReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n})\r\n\r\nexport type AppStatePropsType = ReturnType<typeof reducers>\r\nexport type AppStateActionType = actionAppType   | actionAuthUsersType | actionDialogsType | actionProfileType | actionUsersType\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n\r\nexport default store","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from './Nav.module.css';\r\n\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to ={'/profile'} activeClassName={classes.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to={'/dialogs'} activeClassName={classes.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to={'/users'} activeClassName={classes.active}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to={'/news'} activeClassName={classes.active}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to={'/music'} activeClassName={classes.active}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to={'/login'} activeClassName={classes.active}>Login</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to={'/settings'} activeClassName={classes.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport classes from \"./music.module.css\";\r\n\r\nconst Music =  () => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport classes from './News.module.css'\r\n\r\nconst News = () => {\r\n    return(\r\n      <div>News</div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport classes from './Settings.module.css';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\ntype DialogsItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogsItem: React.FC<DialogsItemPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogsItem;","import React from 'react';\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\ntype MessagesPropsType = {\r\n    message: string\r\n}\r\n\r\nconst Messages: React.FC <MessagesPropsType> = (props) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n\r\n}\r\n\r\nexport default Messages;","import React from \"react\";\r\nimport s from \"./FormControle.module.css\"\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        // <div className={s.formControl + \" \" + (error ? s.error : \"\")}>\r\n        //     <div>\r\n        //         <textarea {...props.input} {...props}/>\r\n        //     </div>\r\n        //     {error && <span>{props.meta.error}</span>}\r\n        //\r\n        // </div>\r\n\r\n        <FormControl {...props}> <textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        // <div className={s.formControl + \" \" + (error ? s.error : \"\")}>\r\n        //     <div>\r\n        //         <input {...props.input} {...props}/>\r\n        //     </div>\r\n        //     {error && <span>{props.meta.error}</span>}\r\n        //\r\n        // </div>\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    )\r\n}","export const requiredField = (value: string) => {\r\n    if (value) return undefined;\r\n\r\n     return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormConrols\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport classes from '../Dialogs.module.css'\r\n\r\n\r\nexport type FormDataType = {\r\n    addMessage: string\r\n}\r\nlet maxLength = maxLengthCreator(100)\r\n\r\nconst MessageForm = (props: InjectedFormProps<FormDataType>) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div className={classes.textarea}><Field component={Textarea} name={'addMessage'} validate={[requiredField, maxLength]}/></div>\r\n        <div className={classes.buttonAdd}><button>Add message</button></div>\r\n    </form>\r\n}\r\n\r\nconst MessageReduxForm = reduxForm<FormDataType>(\r\n    {\r\n        form: 'messageForm'\r\n    }\r\n)(MessageForm)\r\n\r\nexport default MessageReduxForm","import React from 'react';\r\nimport classes from './Dialogs.module.css'\r\nimport DialogsItem from \"./DialogsItem/DialogsItem\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport MessageReduxForm, {FormDataType} from './messageForm/MessageForm';\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsItem = props.dialogs.dialogs.map(d => <DialogsItem name={d.name} id={d.id} key={d.id}/>)\r\n    let messageItem = props.dialogs.messages.map(m => <Messages message={m.message} key={m.id}/>)\r\n\r\n    let addNewMessage = (values: FormDataType) => {\r\n        props.onChangeText(values.addMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n                <div className={classes.dialogsItem}>\r\n                    {dialogsItem}\r\n                </div>\r\n                <div className={classes.messages}>\r\n                    {messageItem}\r\n                </div>\r\n            <MessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {AppStatePropsType} from \"../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MspType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStatePropsType): MspType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirectComponent  <T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MspType> {\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props\r\n            if(isAuth === false) {\r\n                return <Redirect to={'/login'}/>\r\n            }\r\n            return <Component {...restProps as T}/>;\r\n        }\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {\r\n    dialogsPropsType,\r\n    onClickMessageActionCreator\r\n} from \"../../redux/dialogsReducer\";\r\nimport {AppStatePropsType} from \"../../redux/reduxStore\";\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirectComponent} from \"../../HOC/WithAuthRedirectComponent\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    dialogs: dialogsPropsType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    onChangeText: (addMessage: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStatePropsType): mapStateToPropsType => {\r\n    return {\r\n        dialogs: state.dialogs,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        onChangeText: (addMessage: string) => {\r\n            dispatch(onClickMessageActionCreator(addMessage))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirectComponent)(Dialogs);","import React, {useState} from \"react\";\r\nimport classes from \"./paginator.module.css\";\r\n\r\n\r\ntype PaginatorPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize: number\r\n}\r\n\r\nconst Paginator = (props: PaginatorPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / props.portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * props.portionSize\r\n\r\n\r\n    return (\r\n        <div className={classes.paginatorContainer}>\r\n            <div className={classes.paginatorPrev}>\r\n                {portionNumber > 1 && <button onClick={() => setPortionNumber(portionNumber - 1)}>prev</button>}\r\n            </div>\r\n            <div className={classes.numberPage}>\r\n                {pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map(p => {\r\n                        return <span className={props.currentPage === p ? classes.selectedPage : ''}\r\n                                     onClick={() => props.onPageChanged(p)}>{p}\r\n                        </span>\r\n                    })}\r\n            </div>\r\n            {portionCount > portionNumber &&\r\n            <button\r\n                className={classes.paginatorNext}\r\n                onClick={() => setPortionNumber(portionNumber + 1)}>\r\n                next\r\n            </button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator;","export default __webpack_public_path__ + \"static/media/kisspng-avatar-user-computer-icons-software-developer-5b327cc9cc15f7.872727801530035401836.e582e4ba.png\";","import React from \"react\";\r\nimport classes from \"./Users.module.css\";\r\nimport userPhoto\r\n    from \"../../assets/images/kisspng-avatar-user-computer-icons-software-developer-5b327cc9cc15f7.872727801530035401836.png\";\r\nimport {userPropsType} from \"../../redux/usersReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype UserPropsType = {\r\n    users: userPropsType\r\n    followUsers: (userId: number) => void\r\n    unFollowUsers: (userId: number) => void\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst User = (props: UserPropsType) => {\r\n    return (\r\n        <div className={classes.userContainer}>\r\n               <span>\r\n                   <div className={classes.name}>{props.users.name}</div>\r\n                   <div>{props.users.status}</div>\r\n               </span>\r\n               <span>\r\n                   <div>\r\n                       <NavLink to={'/profile/' + props.users.id}>\r\n                           <img className={classes.img}\r\n                                src={props.users.photos.small != null ? props.users.photos.small : userPhoto}/>\r\n                       </NavLink>\r\n                   </div>\r\n                   <div>\r\n                       {props.users.followed ?\r\n                           <button className={classes.buttonFollow} disabled={props.followingInProgress.some(id => id === props.users.id)}\r\n                                   onClick={() => {\r\n                                       props.unFollowUsers(props.users.id)\r\n                                   }}>unFollow</button>\r\n\r\n                           : <button className={classes.buttonFollow} disabled={props.followingInProgress.some(id => id === props.users.id)}\r\n                                     onClick={() => {\r\n                                         props.followUsers(props.users.id)\r\n\r\n                                     }}>Follow</button>}\r\n                   </div>\r\n               </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\nimport {userPropsType} from \"../../redux/usersReducer\";\r\nimport Paginator from \"../common/Paginator/Paginators\";\r\nimport User from \"./User\";\r\n\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<userPropsType>\r\n    followUsers: (userId: number) => void\r\n    unFollowUsers: (userId: number) => void\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst Users = (props: UsersPropsType) => {\r\n    return (\r\n        <div>\r\n            <Paginator\r\n                totalUsersCount={props.totalUsersCount}\r\n                pageSize={props.pageSize}\r\n                currentPage={props.currentPage} onPageChanged={props.onPageChanged} portionSize={10}/>\r\n\r\n            {props.users.map(u => <User\r\n                key={u.id}\r\n                users={u}\r\n                followUsers={props.followUsers}\r\n                unFollowUsers={props.unFollowUsers}\r\n                toggleFollowingInProgress={props.toggleFollowingInProgress}\r\n                followingInProgress={props.followingInProgress}/>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;","export default __webpack_public_path__ + \"static/media/loading-97.c8928b62.gif\";","import React from \"react\";\r\nimport PreloaderImg from \"../../../assets/images/loading-97.gif\";\r\nimport style from \"./preloader.module.css\"\r\n\r\nconst Preloader = () => {\r\n    return <div>\r\n        <img className={style.img} src={PreloaderImg}/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","import {AppStatePropsType} from \"../reduxStore\";\r\nimport {createSelector} from \"reselect\";\r\n\r\n\r\n//reselect библиотека, позволяющая работать с селекторами, дабы не был частый рендеринг, а только для зависимостей\r\nexport const getUsers = (state: AppStatePropsType) => {\r\n    return state.users.users\r\n}\r\n\r\n//reselect создан для работы с сложной логикой\r\nconst getUsersSuper = createSelector(getUsers, (users) => {\r\n    return users.filter((u) => u)\r\n})\r\n\r\nexport const getPageSize = (state: AppStatePropsType) => {\r\n    return state.users.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStatePropsType) => {\r\n    return state.users.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStatePropsType) => {\r\n    return state.users.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStatePropsType) => {\r\n    return state.users.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStatePropsType) => {\r\n    return state.users.followingInProgress\r\n}\r\n\r\nexport const getIsAuth = (state: AppStatePropsType) => {\r\n    return state.auth.isAuth\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStatePropsType} from \"../../redux/reduxStore\";\r\nimport {\r\n    changeCurrentPage,\r\n    toggleFollowingInProgress,\r\n    userPropsType, getUserThunkCreator, followThunk, unFollowThunk\r\n} from \"../../redux/usersReducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress, getIsAuth,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/selectors/usersSelector\";\r\n\r\n\r\nexport type mapStateToPropsType = {\r\n    users: Array<userPropsType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    isAuth: boolean\r\n}\r\n\r\nexport type mapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    changeCurrentPage: (currentPage: number) => void\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => void\r\n    getUser: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nexport type UsersContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nexport class UsersApiComponent extends React.Component<UsersContainerPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUser(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.changeCurrentPage(pageNumber)\r\n        this.props.getUser(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                unFollowUsers={this.props.unFollow}\r\n                followUsers={this.props.follow}\r\n                toggleFollowingInProgress={this.props.toggleFollowingInProgress}\r\n                followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStatePropsType): mapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        isAuth: getIsAuth(state)\r\n\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow: followThunk,\r\n        unFollow: unFollowThunk,\r\n        changeCurrentPage,\r\n        toggleFollowingInProgress,\r\n        getUser: getUserThunkCreator\r\n    }))(UsersApiComponent);","import React from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n// const ProfileStatus = (props: ProfileStatusType) => {\r\n//     const [editMode, setEditMode] = useState<boolean>(false)\r\n//\r\n//     const onDoubleClick = () => {\r\n//         setEditMode(true)\r\n//     }\r\n//\r\n//     const onBlur = () => {\r\n//         setEditMode(false)\r\n//     }\r\n//     return (\r\n//         <div>\r\n//             {editMode\r\n//                 ?\r\n//                 <div>\r\n//                     <input autoFocus={true}  onBlur={onBlur} value={props.status ? props.status : ''}/>\r\n//                 </div>\r\n//                 :\r\n//                 <div>\r\n//                     <span onDoubleClick={onDoubleClick}>{props.status}</span>\r\n//                 </div>\r\n//             }\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n\r\n    onDoubleClick = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    onBlur = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            {this.state.editMode\r\n                ?\r\n                <div className={classes.statusContainer}>\r\n                    <input className={classes.statusInput} autoFocus={true} onChange={(event => {\r\n                        this.setState({\r\n                            status: event.currentTarget.value\r\n                        })\r\n                    })} onBlur={this.onBlur} value={this.state.status}/>\r\n                </div>\r\n                :\r\n                <div className={classes.statusContainer}>\r\n                    Status: <span onDoubleClick={this.onDoubleClick}>\r\n                    {this.props.status ? this.props.status : 'no status'}\r\n                    </span>\r\n                </div>\r\n            }\r\n        </div>;\r\n    }\r\n}\r\n\r\n\r\nexport default ProfileStatus;","export default __webpack_public_path__ + \"static/media/5.6e9bc99a.jpg\";","import React from \"react\";\r\nimport {profileUsersPropsType} from \"../../../redux/profileReducer\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\n\r\n\r\ntype ProfileDataType = {\r\n    profile: profileUsersPropsType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData = (props: ProfileDataType) => {\r\n    return (\r\n        <div className={classes.profileDataContainer}>\r\n            <div><span>Full name:</span> {props.profile.fullName}</div>\r\n            <div><span>Looking for a Job:</span> {props.profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n            <div><span>My professional skills:</span> {props.profile.lookingForAJobDescription}</div>\r\n            <div><span>About Me:</span> {props.profile.aboutMe}</div>\r\n            <div className={classes.contactsContainer}><span>Contacts:</span> {Object.keys(props.profile.contacts).map((key) => {\r\n                return <ContactsProfile key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n            {props.isOwner && <div>\r\n                <button className={classes.buttonEdit} onClick={props.goToEditMode}>edit</button>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ContactsProfileType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst ContactsProfile = (props: ContactsProfileType) => {\r\n    return <div>{props.contactTitle}: {props.contactValue}</div>\r\n}\r\n\r\nexport default ProfileData;","import {contactsUsersPropsType, profileUsersPropsType} from \"../../../redux/profileReducer\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/FormsControls/FormConrols\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\n\r\ninterface IProps {\r\n    profile: profileUsersPropsType\r\n}\r\n\r\nexport type FormProfileDataType = {\r\n    fullName: string | null\r\n    lookingForAJob: boolean | null\r\n    lookingForAJobDescription: string | null\r\n    aboutMe: string | null\r\n    contacts: contactsUsersPropsType\r\n}\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<FormProfileDataType, IProps> & IProps> = (props) => {\r\n    return <div>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={classes.editDataContainer}>\r\n                <div><span>Full name:</span> <Field component={Input} name={'fullName'} placeholder={'full Name'}/></div>\r\n                <div><span>Looking for a Job:</span> <Field\r\n                    component={Input}\r\n                    type={'checkbox'}\r\n                    name={'lookingForAJob'}/>\r\n                </div>\r\n                <div><span>My professional skills:</span> <Field\r\n                    component={Textarea}\r\n                    name={'lookingForAJobDescription'}\r\n                    placeholder={'My professional skills'}/>\r\n                </div>\r\n                <div><span>About Me:</span> <Field\r\n                    component={Textarea}\r\n                    name={'aboutMe'}\r\n                    placeholder={'about Me'}/>\r\n                </div>\r\n                <div className={classes.editContactsContainer}><span>Contacts:</span> {Object.keys(props.profile.contacts).map((key) => {\r\n                    return <div key={key}>{key}: <Field\r\n                        component={Input}\r\n                        name={'contacts.' + key}\r\n                        placeholder={key}\r\n                    />\r\n                    </div>\r\n                })}\r\n                </div>\r\n                <div>\r\n                    <button className={classes.buttonSave}>save</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<FormProfileDataType, IProps>(\r\n    {\r\n        form: 'profileData'\r\n    }\r\n)(ProfileDataForm)\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {profileUsersPropsType} from \"../../../redux/profileReducer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport avatar\r\n    from '../../../assets/images/5.jpg'\r\nimport ProfileData from \"./ProfileData\";\r\nimport {FormProfileDataType, ProfileDataReduxForm} from \"./ProfileDataReduxForm\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: profileUsersPropsType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (files: File) => void\r\n    saveProfile: (formData: FormProfileDataType) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const goToEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files)\r\n            props.savePhoto(e.target.files[0])\r\n    }\r\n\r\n    const setSubmit = async (formData: FormProfileDataType) => {\r\n        await props.saveProfile(formData)\r\n        setEditMode(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.profileInfo}>\r\n            <div className={classes.avatar}>\r\n                <div className={classes.avatarContainer}>\r\n                    <img className={classes.myPhoto} src={props.profile.photos.large || avatar}/>\r\n                    <div>{props.isOwner && <div className={classes.spanPhoto}>Download photo</div>}</div>\r\n                    <div>{props.isOwner &&\r\n                    <input className={classes.inputFile} type={'file'} onChange={mainPhotoSelected}/>}</div>\r\n                    <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataReduxForm profile={props.profile} initialValues={props.profile} onSubmit={setSubmit}/>\r\n                    : <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={goToEditMode}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes from './Post.module.css';\r\nimport avatar from '../../../../assets/images/5.jpg'\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n            <div className={classes.post}>\r\n                <div><img src={avatar}/></div>\r\n                <div className={classes.messagesContainer}>\r\n                    <div className={classes.message}>{props.message}</div>\r\n                    <div className={classes.likes}>\r\n                        <span>Like</span>\r\n                        <span>{props.likeCount}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormConrols\";\r\nimport style from '../MyPosts.module.css';\r\n\r\n\r\nexport type FormDataPostType = {\r\n    addPost: string\r\n}\r\n\r\nlet maxLength = maxLengthCreator(30)\r\n\r\nconst PostsForm = (props: InjectedFormProps<FormDataPostType>) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div className={style.inputForm}><Field component={Textarea} name={'addPost'} validate={[requiredField, maxLength]} placeholder={'hi'}  /></div>\r\n        <div>\r\n            <button className={style.buttonPost}>Add message</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst PostsReduxForm = reduxForm<FormDataPostType>(\r\n    {\r\n        form: 'messageForm'\r\n    }\r\n)(PostsForm)\r\n\r\nexport default PostsReduxForm","import React from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport PostsReduxForm, {FormDataPostType} from \"./postForm/PostForm\";\r\n\r\n\r\nconst MyPosts = React.memo( (props: MyPostsPropsType) => {\r\n\r\n    let postElement = props.profile.posts.map(p => <Post message={p.message} likeCount={p.likeCount} key={p.id}/>)\r\n    let addPost = (value: FormDataPostType) => {\r\n        props.addPost(value.addPost)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsContainer}>\r\n            <div className={classes.item}>\r\n                <h2>My post</h2>\r\n            </div>\r\n            <div className={classes.addPostContainer}>\r\n                <PostsReduxForm onSubmit={addPost}/>\r\n                <div className={classes.postContainer}>{postElement}</div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {\r\n    addPostActionCreator, profilePropsType\r\n} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {AppStatePropsType} from \"../../../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype mapStatePropsType = {\r\n    profile: profilePropsType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (addPost: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = mapStatePropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStatePropsType): mapStatePropsType => {\r\n    return {\r\n        profile: state.profile,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (addPost: string) => {\r\n            dispatch(addPostActionCreator(addPost))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./Posts/MyPostsContainer\";\r\nimport {profileUsersPropsType} from \"../../redux/profileReducer\";\r\nimport { FormProfileDataType } from \"./ProfileInfo/ProfileDataReduxForm\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: profileUsersPropsType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (files: File) => void\r\n    saveProfile: (formData: FormProfileDataType) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUsersStatusThunk,\r\n    profileUsersPropsType, savePhotoThunk, saveProfileThunk,\r\n    setUsersProfileThunk,\r\n    updateUsersStatusThunk\r\n} from \"../../redux/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirectComponent} from \"../../HOC/WithAuthRedirectComponent\";\r\nimport {AppStatePropsType} from \"../../redux/reduxStore\";\r\nimport {compose} from \"redux\";\r\nimport {FormProfileDataType} from \"./ProfileInfo/ProfileDataReduxForm\";\r\n\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\n\r\n\r\nexport type mapStateProfileToPropsType = {\r\n    profile: profileUsersPropsType\r\n    status: string\r\n    myId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\nexport type mapDispatchProfileToPropsType = {\r\n    setUsersProfile: (userId: string | number | null) => void\r\n    getStatus: (userId: string | number | null) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (files: File) => void\r\n    saveProfile: (formData: FormProfileDataType) => void\r\n}\r\n\r\nexport type ProfileContainerPropsType = mapStateProfileToPropsType & mapDispatchProfileToPropsType\r\n\r\nexport type WitchRouterProfileContainerType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<WitchRouterProfileContainerType> {\r\n    refresh() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.myId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.setUsersProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<WitchRouterProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refresh()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStatePropsType): mapStateProfileToPropsType => ({\r\n    profile: state.profile.profile,\r\n    status: state.profile.status,\r\n    myId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        setUsersProfile: setUsersProfileThunk,\r\n        getStatus: getUsersStatusThunk,\r\n        updateStatus: updateUsersStatusThunk,\r\n        savePhoto: savePhotoThunk,\r\n        saveProfile: saveProfileThunk\r\n    }),\r\n    withRouter,\r\n    withAuthRedirectComponent)(ProfileContainer);","export default __webpack_public_path__ + \"static/media/logo.ec36afef.jpg\";","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Header.module.css';\r\nimport logo from '../../assets/images/logo.jpg'\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logOut: () => void\r\n}\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img src={logo}/>\r\n            <div className={classes.login}>\r\n                {props.isAuth ?\r\n                    <div className={classes.logOut}>{props.login} -\r\n                        <button\r\n                            className={classes.buttonLogOut}\r\n                            onClick={props.logOut}>\r\n                            Log out\r\n                        </button>\r\n                    </div>\r\n                    : <NavLink className={classes.loginNav} to={'/login'}>Login</NavLink>}\r\n\r\n            </div>\r\n        </header>\r\n    );\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from 'react-redux';\r\nimport {removeLoginDataThunk} from \"../../redux/authReducer\";\r\nimport {AppStatePropsType} from \"../../redux/reduxStore\";\r\n\r\ntype mapStateToPropsAuthContainer = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype mapDispatchToPropsAuthType = {\r\n    logOut: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStatePropsType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n\r\n})\r\n\r\ntype HeaderContainerPropsType = mapStateToPropsAuthContainer & mapDispatchToPropsAuthType\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n\r\n    render() {\r\n        return <Header {...this.props} isAuth={this.props.isAuth} login={this.props.login} logOut = {this.props.logOut}/>;\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {logOut: removeLoginDataThunk})(HeaderContainer);","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormConrols\";\r\nimport {requiredField} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {removeLoginDataThunk, setLoginDataThunk} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStatePropsType} from \"../../redux/reduxStore\";\r\nimport loginStyles from './login.module.css'\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype mapDispatchLoginToPropsType = {\r\n    setLogin: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    removeLogin: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStatePropsType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captcha\r\n    }\r\n}\r\n\r\ntype IProps = {\r\n    captchaUrl: string\r\n}\r\n\r\nconst LoginForm = (props: InjectedFormProps<FormDataType, IProps> & IProps) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field\r\n                className={loginStyles.input}\r\n                component={Input} name={'email'}\r\n                placeholder={'email'}\r\n                validate={[requiredField]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <Field\r\n                className={loginStyles.input}\r\n                component={Input}\r\n                name={'password'}\r\n                type={'password'}\r\n                placeholder={'password'}\r\n                validate={[requiredField]}\r\n            />\r\n        </div>\r\n        <div className={loginStyles.checkboxContainer}>\r\n            <Field\r\n                className={loginStyles.checkbox}\r\n                component={Input}\r\n                name={'rememberMe'}\r\n                type={'checkbox'}\r\n            />\r\n            <span  className={loginStyles.checkboxSpan}>remember me</span>\r\n        </div>\r\n        <div>\r\n            {props.captchaUrl && <img src={props.captchaUrl}/>}\r\n            {props.captchaUrl && <Field component={Input} name={'captcha'}/>}\r\n        </div>\r\n        <div className={props.error ? loginStyles.error : ' '}>\r\n            {props.error && <div>{props.error}</div>}\r\n        </div>\r\n        <div>\r\n            <button className={loginStyles.loginButton}>Login</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, IProps>(\r\n    {\r\n        form: 'login'\r\n    }\r\n)(LoginForm)\r\n\r\nconst Login = (props: mapStateToPropsType & mapDispatchLoginToPropsType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.setLogin(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div className={loginStyles.loginContainer}>\r\n        <h1 className={loginStyles.h1}>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl ? props.captchaUrl : ''}/>\r\n    </div>\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    setLogin: setLoginDataThunk,\r\n    removeLogin: removeLoginDataThunk\r\n})(Login);","import React from 'react';\r\nimport './App.css';\r\nimport Nav from \"./component/Nav/Nav\";\r\nimport Music from \"./component/Music/music\";\r\nimport News from \"./component/News/News\";\r\nimport Settings from \"./component/Settings/Settings\";\r\nimport {Route, withRouter} from 'react-router-dom';\r\nimport DialogsContainer from './component/Dialogs/DialogsContainer';\r\nimport UsersContainer from \"./component/Users/UsersContainer\";\r\nimport ProfileContainer from \"./component/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./component/Header/HeaderContainer\";\r\nimport Login from \"./component/login/login\";\r\nimport {connect} from 'react-redux';\r\nimport {compose} from \"redux\";\r\nimport {initializeAppTC} from \"./redux/appReducer\";\r\nimport {AppStatePropsType} from \"./redux/reduxStore\";\r\nimport Preloader from \"./component/common/Preloader/Preloader\";\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    initializedUser: () => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStatePropsType): MapStateToPropsType => (\r\n    {\r\n        initialized: state.app.initialized,\r\n        isAuth: state.auth.isAuth\r\n\r\n    }\r\n)\r\n\r\ntype AppProps = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass App extends React.Component<AppProps> {\r\n    componentDidMount() {\r\n        this.props.initializedUser()\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className={'app-wrapper'}>\r\n                <HeaderContainer/>\r\n                <Nav/>\r\n                <div className={'app-wrapper-content'}>\r\n                    <Route path={'/dialogs'} render={() => <DialogsContainer/>}/>\r\n                    <Route path={'/profile/:userId?'} render={() => <ProfileContainer/>}/>\r\n                    <Route path={'/users'} render={() => <UsersContainer/>}/>\r\n                    <Route path={'/music'} render={() => <Music/>}/>\r\n                    <Route path={'/news'} render={() => <News/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/settings'} render={() => <Settings/>}/>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        initializedUser: initializeAppTC\r\n    }))(App)\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport store from \"./redux/reduxStore\";\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <HashRouter>\r\n               <Provider store={store}>\r\n                   <App/>\r\n               </Provider>\r\n            </HashRouter>\r\n        </React.StrictMode>, document.getElementById('root')\r\n    );\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"login_loginContainer__3DOF8\",\"h1\":\"login_h1__2C6qi\",\"input\":\"login_input__2l3Pf\",\"checkboxContainer\":\"login_checkboxContainer__1-5zZ\",\"checkbox\":\"login_checkbox__2Ewl4\",\"checkboxSpan\":\"login_checkboxSpan__2F0UZ\",\"loginButton\":\"login_loginButton__DhMSi\",\"error\":\"login_error__2ZymJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3AnsP\",\"dialogsItem\":\"Dialogs_dialogsItem__2irEs\",\"messages\":\"Dialogs_messages__6AbZT\",\"textarea\":\"Dialogs_textarea__3WnBl\",\"buttonAdd\":\"Dialogs_buttonAdd__3wPrg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsContainer\":\"MyPosts_postsContainer__2ziHH\",\"item\":\"MyPosts_item__31-SE\",\"inputForm\":\"MyPosts_inputForm__1pX6l\",\"buttonPost\":\"MyPosts_buttonPost__3eKdy\",\"addPostContainer\":\"MyPosts_addPostContainer__2FGKr\",\"postContainer\":\"MyPosts_postContainer__3FxsG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginatorContainer\":\"paginator_paginatorContainer__2Sy2l\",\"paginatorPrev\":\"paginator_paginatorPrev__duGap\",\"paginatorNext\":\"paginator_paginatorNext__ncnMN\",\"selectedPage\":\"paginator_selectedPage__2Cxer\",\"numberPage\":\"paginator_numberPage__1R52S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Users_img__2T2Ny\",\"userContainer\":\"Users_userContainer__1lgE0\",\"name\":\"Users_name__J_dgO\",\"buttonFollow\":\"Users_buttonFollow__3Clgq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__ZqvZa\",\"login\":\"Header_login__2T9bo\",\"logOut\":\"Header_logOut__2QN_m\",\"buttonLogOut\":\"Header_buttonLogOut__Xa0Jy\",\"loginNav\":\"Header_loginNav__2_00F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__CXO0f\",\"messagesContainer\":\"Post_messagesContainer__1WA_D\",\"message\":\"Post_message__2v9O7\",\"likes\":\"Post_likes__uapMY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControle_formControl__30GsY\",\"error\":\"FormControle_error__iIJMu\"};"],"sourceRoot":""}